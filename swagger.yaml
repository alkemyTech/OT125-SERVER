openapi: 3.0.0
info:
  title: ONG API
  version: 0.1.0

servers:
  - url: http://localhost:3000

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      summary: Creates an user and returns an access token
      tags:
        - authorization
      requestBody:
        description: information of the account to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: email@email.com
                firstName:
                  type: string
                  example: Llewyn
                lastName:
                  type: string
                  example: Davis
                image:
                  type: string
                  example: https://pics.filmaffinity.com/A_prop_sito_de_Llewyn_Davis-206373785-large.jpg
                password:
                  type: string
                  example: password
                passwordConfirmation:
                  type: string
                  example: password
              required:
                - email
                - firstName
                - lastName
                - roleId
                - password
                - passwordConfirmation
      responses:
        '201':
          $ref: '#/components/responses/validAuth'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '500':
          $ref: '#/components/responses/GenericError'

  /auth/login:
    post:
      summary: Validates credentials and returns access token
      tags:
        - authorization
      requestBody:
        description: credentials to login into account
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: email@email.com
                password:
                  type: string
                  example: password
              required:
                - email
                - password
      responses:
        '200':
          $ref: '#/components/responses/validAuth'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '403':
          $ref: '#/components/responses/GenericError'
        '500':
          $ref: '#/components/responses/GenericError'
  /categories:
    get:
      summary: Get a categories paginated list.
      tags:
      - Categories
      description: 'Get a list of categories'
      parameters:
        - name: page
          in: query
          description: 'Optional pagination'
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
            $ref: '#/components/responses/CategoryPaginated'
        '400':
            $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions. 
      security:
        - BearerAuth: []
    post:
       summary: Creates a new category
       tags:
        - Categories
       requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryObject'
        required: true
       responses:
        '201':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions. 
        '409':
          description: Category name already exists on database.
       security:
        - BearerAuth: []   
  /categories/{id}:
    get:
      summary: Get a specific category.
      parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
      tags:
      - Categories
      description: 'Get a category by id'
      responses:
        '200':
            $ref: '#/components/responses/CategoryResponse'
        '400':
            $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions.
        '404':
          $ref: '#/components/responses/EntityNotFound'
      security:
        - BearerAuth: []
    put:
       summary: Update a category
       tags:
        - Categories
       parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
       requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryObject'
        required: true
       responses:
        '200':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions.
       security:
        - BearerAuth: []
    delete: 
      summary: Delete a specific category
      parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
      tags:
      - Categories
      responses:
       '202':
         $ref: '#/components/responses/CategoryDeleted'
       '400':
          $ref: '#/components/responses/ValidationErrors'
       '401':
          description: Token missing in header.
       '403':
          description: Insufficient permissions.
       '404':
          $ref: '#/components/responses/EntityNotFound'
      security:
        - BearerAuth: []
       
       

  /users:
    get:
      summary: Returns a list of users
      tags:
        - users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: page number; default 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: qty of user per page; default 10
      responses:
        '200':
          description: list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  metadata:
                    type: object
                    properties:
                      lastPage:
                        type: number
                        example: 3
                      currentPage:
                        type: number
                        example: 1
                      previousPage:
                        type: number
                        example: null
                      nextPage:
                        type: number
                        example: 2


  /activities:
    post:
      summary: Creates a new Activity
      tags:
        - Activities
      requestBody:
        description: body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: activityTest 33
                content:
                  type: string
                  example: Demo content
                image:
                  type: string
                  example: https://live.staticflickr.com/65535/49737580966_d7eb77f786_b.jpg
              required:
                - email
                - content
                - image
      responses:
        '200':
          $ref: '#/components/responses/validAuth'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '403':
          $ref: '#/components/responses/GenericError'
        '500':
          $ref: '#/components/responses/GenericError'

  /activities/{id}:
    put:
      summary: Updates an existing activity
      tags:
        - Activities
      parameters:
        - name: id
          in: path
          required: true
          description: Activity ID.
          schema:
            type : integer
            format: int64
            minimum: 1
      requestBody:
        description: Activity new values
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: activityTest 44
                content:
                  type: string
                  example: Demo content
                image:
                  type: string
                  example: https://live.staticflickr.com/65535/49737580966_d7eb77f786_b.jpg
              required:
                - email
                - content
                - image
      responses:
        '200':
          $ref: '#/components/responses/validAuth'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '403':
          $ref: '#/components/responses/GenericError'
        '500':
          $ref: '#/components/responses/GenericError'
  
  /testimonials:
  
    post:
       summary: Create a new testimonial
       tags:
        - Testimonials
       requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestimonialObject'
        required: true
       responses:
        '201':
          $ref: '#/components/responses/TestimonialResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions. 
        
       security:
        - BearerAuth: []  
  
  
  /testimonials/{id}:
    put:
       summary: Update an existing testimonial
       tags:
        - Testimonials
       parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
       requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestimonialObject'
        required: true
       responses:
        '200':
          $ref: '#/components/responses/TestimonialResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions.
       security:
        - BearerAuth: []
    delete: 
      summary: Delete a specific testimonial
      parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
      tags:
      - Testimonials
      responses:
       '202':
         $ref: '#/components/responses/TestimonialDeleted'
       '400':
          $ref: '#/components/responses/ValidationErrors'
       '401':
          description: Token missing in header.
       '403':
          description: Insufficient permissions.
       '404':
          $ref: '#/components/responses/EntityNotFound'
      security:
        - BearerAuth: []

  /members:
  
    post:
       summary: Create a new member
       tags:
        - Members
       requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberObject'
        required: true
       responses:
        '201':
          $ref: '#/components/responses/MemberResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions. 
        '409':
          description: Member name already exists on database.
       security:
        - BearerAuth: []  

  /members/{id}:
    get:
      summary: Get a specific member.
      parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
      tags:
      - Members
      description: 'Get a member by id'
      responses:
        '200':
            $ref: '#/components/responses/MemberResponse'
        '400':
            $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions.
        '404':
          $ref: '#/components/responses/EntityNotFound'
      security:
        - BearerAuth: []
    put:
       summary: Update an existing member
       tags:
        - Members
       parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
       requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberObject'
        required: true
       responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions.
       security:
        - BearerAuth: []
    delete: 
      summary: Delete a specific member
      parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
      tags:
      - Members
      responses:
       '202':
         $ref: '#/components/responses/MemberDeleted'
       '400':
          $ref: '#/components/responses/ValidationErrors'
       '401':
          description: Token missing in header.
       '403':
          description: Insufficient permissions.
       '404':
          $ref: '#/components/responses/EntityNotFound'
      security:
        - BearerAuth: []
  

       
 
  /Slides:
    post:
        summary: Creates a new slide
        tags:
          - Slides
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlideObject'
          required: true
        responses:
          '201':
            $ref: '#/components/responses/SlideResponse'
          '400':
            $ref: '#/components/responses/ValidationErrors'
          '401':
            description: Token missing in header.
          '403':
            description: Insufficient permissions. 
          '409':
            description: Slide name already exists on database.
        security:
          - BearerAuth: []        
  /Slides/{id}:
    get:
      summary: Get a specific slide.
      
      parameters:
         - in: path
           name: id
           schema:
            type: integer
           required: true
      tags:
      - Slides
      description: 'Get a slide by id'
      responses:
        '200':
            $ref: '#/components/responses/SlideResponse'
        '400':
            $ref: '#/components/responses/ValidationErrors'
        '401':
          description: Token missing in header.
        '403':
          description: Insufficient permissions.
        '404':
          $ref: '#/components/responses/EntityNotFound'
      security:
        - BearerAuth: []



components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          example: email@email.com
        password:
          type: string
          example: password
        firstName:
          type: string
          example: Llewyn
        lastName:
          type: string
          example: Davis
        image:
          type: string
          example: https://pics.filmaffinity.com/A_prop_sito_de_Llewyn_Davis-206373785-large.jpg
        roleId:
          type: number
          example: 1
        createdAt:
          type: string
          example: 2022-01-29T14:08:56.919Z
        updatedAt:
          type: string
          example: 2022-01-29T14:08:56.919Z
        deletedAt:
          type: string
          example: null
    CategoryObject:
       type: object
       required:
        - name
       properties:
        name: 
         type: string
         example: category 1
        image: 
         type: string
         example: https://i.imgur.com/example-category.jpg
        description:
         type: string
         example: Sample description of category
    Category:
     type: object
     properties:
       id: 
        type: integer
        example: 1
       name: 
        type: string
        example: category 1
       image: 
        type: string
        example: https://i.imgur.com/example-category.jpg
       description:
        type: string
        example: Sample description of category
       createdAt: 
        type: string
        example: "2022-02-03T04:09:51.592Z"
       updatedAt: 
        type: string
        example: "2022-02-03T04:09:51.592Z" 
    CategorySimplifiedDTO:
      type: object
      properties:
       id:
         type: integer
         example: 1
       name:
         type: string
         example: Category 1
    CategoryPaginatedDTO:
     type: object
     properties:
      categories:
       type: array
       items:
        $ref: "#/components/schemas/CategorySimplifiedDTO"
      metadata:
       type: object
       properties:
         finalPage:
             type: integer
             example: 10
         nextPage:
             type: integer
             example: 3
         previousPage:
             type: integer 
             example: 1
      
    TestimonialObject:
       type: object
       required:
        - name
       properties:
        name: 
         type: string
         example: testimonial 1
        image: 
         type: string
         example: https://i.imgur.com/example-testimonial.jpg
        content:
         type: string
         example: Sample content of testimonial
    Testimonial:
     type: object
     properties:
       id: 
        type: integer
        example: 1
       name: 
        type: string
        example: testimonial 1
       image: 
        type: string
        example: https://i.imgur.com/example-testimonial.jpg
       content:
        type: string
        example: Sample description of testimonial
       createdAt: 
        type: string
        example: "2022-02-03T04:09:51.592Z"
       updatedAt: 
        type: string
        example: "2022-02-03T04:09:51.592Z" 

    MemberObject:
       type: object
       required:
        - name
       properties:
        name: 
         type: string
         example: member 1
        facebookUrl: 
         type: string
         example: https://i.imgur.com/example-member.jpg
        instagramUrl: 
         type: string
         example: https://i.imgur.com/example-member.jpg
        linkedinUrl: 
         type: string
         example: https://i.imgur.com/example-member.jpg
        image: 
         type: string
         example: https://i.imgur.com/example-member.jpg
        description:
         type: string
         example: Sample content of member
    Member:
     type: object
     properties:
       id: 
        type: integer
        example: 1
       name: 
        type: string
        example: member 1
       facebookUrl: 
         type: string
         example: https://i.imgur.com/example-member.jpg
       instagramUrl: 
         type: string
         example: https://i.imgur.com/example-member.jpg
       linkedinUrl: 
         type: string
         example: https://i.imgur.com/example-member.jpg
       image: 
        type: string
        example: https://i.imgur.com/example-member.jpg
       description:
        type: string
        example: Sample description of member
       createdAt: 
        type: string
        example: "2022-02-03T04:09:51.592Z"
       updatedAt: 
        type: string
        example: "2022-02-03T04:09:51.592Z" 
    SlideObject:
       type: object
       required:
        - name
       properties:
        imageUrl: 
         type: string
         example: image-B64 1
        text: 
         type: string
         example: description 1
        
     
  responses:
    JWT:
      description: token
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    validAuth:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                type: object
                properties:
                  email:
                    type: string
                    example: email@email.com
                  firstName:
                    type: string
                    example: Llewyn
                  lastName:
                    type: string
                    example: Davis
                  image:
                    type: string
                    example: https://pics.filmaffinity.com/A_prop_sito_de_Llewyn_Davis-206373785-large.jpg
                  roleId:
                    type: number
                    example: 1
                  createdAt:
                    type: string
                    example: 2022-01-29T14:08:56.919Z
                  updatedAt:
                    type: string
                    example: 2022-01-29T14:08:56.919Z
              token:
                type: string
                example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    ValidationErrors:
      description: A JSON array of errors
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    msg:
                      type: string
                    param:
                      type: string
                    location:
                      type: string
    GenericError:
      description: A json array of errors
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    msg:
                      type: string
    CategoryResponse:
      description: A json data response for category
      content:
        application/json:
          schema:
            type: object
            properties:
              data: 
                $ref: '#/components/schemas/Category'
    CategoryPaginated:
     description: response of paginated categories with only id and name.
     content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryPaginatedDTO'
    CategoryDeleted:
      description: Success deleted message
      content:
        application/json:
          schema:
            type: object
            properties:
              data: 
                type: object
                properties:
                  deleteStatus:
                     type: string
                     example: Category with id 17 deleted successfully.

    TestimonialResponse:
      description: A json data response for testimonial
      content:
        application/json:
          schema:
            type: object
            properties:
              data: 
                $ref: '#/components/schemas/Testimonial'
    TestimonialDeleted:
      description: Success deleted message
      content:
        application/json:
          schema:
            type: object
            properties:
              data: 
                type: object
                properties:
                  deleteStatus:
                     type: string
                     example: Testimonial with id 17 deleted successfully.

    MemberResponse:
      description: A json data response for member
      content:
        application/json:
          schema:
            type: object
            properties:
              data: 
                $ref: '#/components/schemas/Member'
    MemberDeleted:
      description: Success deleted message
      content:
        application/json:
          schema:
            type: object
            properties:
              data: 
                type: object
                properties:
                  deleteStatus:
                     type: string
                     example: Member with id 17 deleted successfully.
    
     

    EntityNotFound:
      description: Error message when required entity doesn't exists in database.
      content:
        application/json:
          schema:
            type: object
            properties:
              error: 
                type: string
                example: Entity with id X doesn't exists.
    SlideResponse:
      description: A json data response for slide
      content:
        application/json:
          schema:
            type: object
            properties:
              data: 
                $ref: '#/components/schemas/SlideObject'            


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt
      description: 'note: non-oauth scopes are not defined at the securityScheme level'

tags:
  - name: authorization
  - name: Categories
    description: Categories CRUD
